require 'rails_helper'

RSpec.describe Api::V2::PharmacyApi::RegularItemsController, type: :request do
  before { allow(JsonWebToken).to receive(:jwks_hash).and_return(dummy_jwks_hash) }

  describe 'GET /api/v2/pharmacy/pharmacies/:pharmacy_id/regular_items' do
    let(:auth0_user_id) { 'auth0|507f1f77bcf86cd799439020' }
    let(:pharmacy_id) { 0 }

    it_behaves_like 'pharmacy_api authentication, '

    context 'when logged in' do
      let!(:orderable_item) { create :orderable_item }

      before { prepare_mock.authentication_setup([:pharmacy], auth0_user_id, [pharmacy_id]) }

      context 'when there is empty regular_items, ' do
        it 'will success' do
          is_expected.to eq 200
          expect(json.size).to eq 0
        end
      end

      context 'when there is 3 regular_items, ' do
        let(:pharmacy_id) { 1 }
        let!(:regular_items) { create_list :regular_item, 3, pharmacy_id: pharmacy_id, dealer_id: 1, orderable_item: orderable_item }

        it 'will success' do
          is_expected.to eq 200
          expect(json.size).to eq 3
          3.times do |i|
            expect(json[i]['id']).not_to be_nil
            expect(json[i]['pharmacy_id']).to eq regular_items[i].pharmacy_id
            expect(json[i]['dealer_id']).to eq regular_items[i].dealer_id
            expect(json[i]['orderable_item_id']).to eq regular_items[i].orderable_item_id
            expect(json[i]['created_at']).not_to be_nil
            expect(json[i]['updated_at']).not_to be_nil
          end
        end

<<<<<<< HEAD
        context 'can limit fields' do
          let(:params) { { fields: 'id,dealer_id' } }
=======
        context 'when there is 3 regular_items, ' do
          let(:pharmacy_id) { 1 }
          let!(:regular_items) { create_list :regular_item, 3, pharmacy_id: pharmacy_id, dealer_id: 1 }
>>>>>>> bd41a5de81f90f300023651a219cc94627ceb777

          it 'will success' do
            is_expected.to eq 200
            3.times do |i|
              expect(json[i]['id']).not_to be_nil
              expect(json[i]['dealer_id']).not_to be_nil
              expect(json[i].size).to eq 2
              expect(json[i]['pharmacy_id']).to be_nil
              expect(json[i]['orderable_item_id']).to be_nil
              expect(json[i]['created_at']).to be_nil
              expect(json[i]['updated_at']).to be_nil
            end
          end
        end
      end

<<<<<<< HEAD
      context 'can sort ' do
        let(:pharmacy_id) { 1 }
        let!(:regular_item1) { create :regular_item, pharmacy_id: pharmacy_id, dealer_id: 1, orderable_item: orderable_item }
        let!(:regular_item2) { create :regular_item, pharmacy_id: pharmacy_id, dealer_id: 2, orderable_item: orderable_item }
=======
        context 'can sort ' do
          let(:pharmacy_id) { 1 }
          let!(:regular_item1) { create :regular_item, pharmacy_id: pharmacy_id, dealer_id: 1 }
          let!(:regular_item2) { create :regular_item, pharmacy_id: pharmacy_id, dealer_id: 2 }
>>>>>>> bd41a5de81f90f300023651a219cc94627ceb777

        context 'by dealer_id ASC' do
          let(:params) { { sort: 'dealer_id' } }

          it 'will success' do
            is_expected.to eq 200
            expect(json.length).to eq 2
            expect(json[0]['id']).to eq regular_item1.id
            expect(json[1]['id']).to eq regular_item2.id
          end
        end

        context 'by dealer_id DESC' do
          let(:params) { { sort: '-dealer_id' } }

          it 'will success' do
            is_expected.to eq 200
            expect(json.length).to eq 2
            expect(json[0]['id']).to eq regular_item2.id
            expect(json[1]['id']).to eq regular_item1.id
          end
        end
      end

      context 'when there are 240 groups,' do
        let(:pharmacy_id) { 1 }

<<<<<<< HEAD
        let_it_be(:regular_items) do
          create_list :regular_item, 240, pharmacy_id: 1, dealer_id: 1, orderable_item: create(:orderable_item, name: 'sample')
        end
=======
          let_it_be(:regular_items) do
            create_list :regular_item, 240, pharmacy_id: 1, dealer_id: 1
          end
>>>>>>> bd41a5de81f90f300023651a219cc94627ceb777

        context 'can get 1st page' do
          it do
            is_expected.to eq 200
            expect(response.headers['x-current-page']).to eq '1'
            expect(response.headers['x-total-pages']).to eq String((regular_items.length.to_f / Pagy.const_get(:VARS)[:items]).ceil)
            expect(response.headers['x-total-count']).to eq regular_items.length.to_s
            expect(json.length).to eq Pagy.const_get(:VARS)[:items]
          end
        end

        context 'can get 2nd page' do
          let(:params) { { page: 2 } }

          it do
            is_expected.to eq 200
            expect(response.headers['x-current-page']).to eq '2'
            expect(response.headers['x-total-pages']).to eq String((regular_items.length.to_f / Pagy.const_get(:VARS)[:items]).ceil)
            expect(response.headers['x-total-count']).to eq regular_items.length.to_s
            expect(json.length).to eq Pagy.const_get(:VARS)[:items]
          end
        end

        context 'can get 3rd page' do
          let(:params) { { page: 3 } }

          it do
            is_expected.to eq 200
            expect(response.headers['x-current-page']).to eq '3'
            expect(response.headers['x-total-pages']).to eq String((regular_items.length.to_f / Pagy.const_get(:VARS)[:items]).ceil)
            expect(response.headers['x-total-count']).to eq regular_items.length.to_s
            expect(json.length).to eq regular_items.length - Pagy.const_get(:VARS)[:items] * 2
          end
        end
      end
    end
  end

  describe 'POST /api/v2/pharmacy/pharmacies/:pharmacy_id/regular_items' do
    let(:auth0_user_id) { 'auth0|507f1f77bcf86cd799439020' }
    let(:pharmacy_id) { 0 }

    it_behaves_like 'pharmacy_api authentication, '

    context 'when logged in' do
      let!(:orderable_item) { create :orderable_item }
      let!(:pharmacy_id) { 1 }

      before { prepare_mock.authentication_setup([:pharmacy], auth0_user_id, [pharmacy_id]) }

      context 'minimum required params regular_item' do
        let!(:params) { { orderable_item_id: orderable_item.id, pharmacy_id: pharmacy_id, dealer_id: 1 } }

        it 'will success' do
          expect { subject }.to change(RegularItem, :count).by 1
          is_expected.to eq 200

          expect(json['id']).not_to be_nil
          expect(json['pharmacy_id']).to eq params[:pharmacy_id]
          expect(json['dealer_id']).to eq params[:dealer_id]
          expect(json['orderable_item_id']).to eq params[:orderable_item_id]
          expect(json['created_at']).not_to be_nil
          expect(json['updated_at']).not_to be_nil
        end
      end

      context 'only dealer_id params' do
        let(:params) { { dealer_id: 1 } }

        it 'will failed' do
          expect { subject }.to change(RegularItem, :count).by 0
          is_expected.to eq 422

          expect(json['id']).to eq nil
          expect(json['errors'].size).to eq 2
        end
      end
    end
  end

  describe 'DELETE /api/v2/pharmacy/pharmacies/:pharmacy_id/regular_items/:id' do
    let(:auth0_user_id) { 'auth0|507f1f77bcf86cd799439020' }
    let(:pharmacy_id) { 0 }
    let(:id) { 0 }

    context 'when logged in' do
      let(:pharmacy_id) { 1 }
      let!(:orderable_item) { create :orderable_item }
      let!(:regular_item) { create :regular_item, pharmacy_id: pharmacy_id, dealer_id: 1, orderable_item: orderable_item }
      let(:id) { regular_item.id }

      before { prepare_mock.authentication_setup([:pharmacy], auth0_user_id, [pharmacy_id]) }

      context 'when there is 1 regular_item,' do
        it 'will success' do
          expect { subject }.to change(RegularItem, :count).by(-1)
          is_expected.to eq 200
          expect(json['result']).to eq 'deleted'
          expect(json['data']['id']).to eq regular_item.id
        end
      end

      context 'when there are no regular_item,' do
        let(:id) { 9999 }

        it 'will be not found' do
          is_expected.to eq 404
        end
      end
    end
  end
end
