snippet function
abbr func
	${1}function ${2:}(${3}) {
		${4:// code...}
	}

snippet php
	<?php
	${1}
	?>

snippet pe
options word
	<?php echo ${1}; ?>

snippet echoh
	<?php echo htmlentities(${1}, ENT_QUOTES, 'utf-8') ?>${0}

snippet pfor
	<?php for ($i = ${1:0}; $i < ${2}; $i++) { ?>
		${0:}
	<?php } ?>

snippet pfore
	<?php foreach ($${1:} as $${2:}) { ?>
		${0:}
	<?php } ?>

snippet pife
	<?php if (${1}) { ?>
	${2}
	<?php } else { ?>
	${0}
	<?php } ?>

snippet pif
	<?php if (${1}) { ?>
	${0}
	<?php } ?>

snippet pelse
	<?php else: ?>

snippet this
	<?php $this->${0} ?>

snippet ethis
	<?php echo $this->${0} ?>

snippet docc
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 **/
	${1:var} \$${2};${0}

snippet docd
	/**
	 * ${3:undocumented constant}
	 **/
	define(${1} ${2});${0}

snippet docs
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6}
	 **/
	${1}function ${2}(${3});${0}

snippet docf
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6}
	 **/
	${1}function ${2}(${3})
	{
		${0}
	}


snippet doch
	/**
	 * ${1}
	 *
	 * @author ${2}
	 * @version ${3}
	 * @copyright ${4}
	 * @package ${5:default}
	 **/
	
	/**
	 * Define DocBlock
	 **/

snippet doci
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4}
	 **/
	interface ${1}
	{
		${0}
	} // END interface ${1}

snippet c
	/**
	 * ${1}
	 */
	${2}function ${3}(${4}) {
		${5}
	}

snippet class
	/**
	 * ${1}
	 */
	class ${2:ClassName} {
		function ${4:__construct}(${5:argument}) {
			${0}
		}
	}

snippet def
	define('${1}', ${0});

snippet do
	do {
		${0:# code...}
	} while (${1});

snippet if? 
	$${1:} = (${2:}) ? ${3:} : ${4:};

snippet ifelse
	if (${1:condition}) {
		${2:# code...}
	} else {
		${3:# code...}
	}
	${0}

snippet if
	if (${1:}) {
		${0:}
	}

snippet echo
	echo "${1:string}"${0};

snippet else
	else {
		${0:# code...}
	}

snippet elseif
	elseif (${1:condition}) {
		${0:# code...}
	}

snippet for
	for ($i = 0; $i < ${1}; $i++) {
		${0}
	}

snippet fore
	foreach ($${1:} as $${2:}) {
		${0:}
	}

snippet func
	${1:public }function ${2}(${3})
	{
		${0}
	}

snippet con
	function __construct(${1}) {
		${0}
	}

snippet here
	<<<${1:HTML}
	${2:content here}
	$1;

snippet inc
	include '${1:file}';${0}

snippet inco
	include_once '${1:file}';${0}

snippet array
options word
	$${1:arrayName} = array('${2}' => ${3} ${0});

snippet req
	require '${1:file}';${0}

snippet reqo
	require_once '${1:file}';${0}

snippet ret
	return${1};${0}

snippet retf
	return false;

snippet rett
	return true;

snippet case
	case '${1:variable}':
		${0:# code...}
		break;

snippet switch
abbr sw
	switch (${1:variable}) {
	case '${2:value}':
		${3:# code...}
		break;
	${0}
	default:
		${4:# code...}
		break;
	}

snippet throw
	throw new ${1}Exception(${2:"${3:Error Processing Request}"}${4:});
	${0}

snippet while
abbr wh
	while (${1}) {
		${0:# code...}
	}

snippet gloabals
	\$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${0}

snippet cookie
	\$_COOKIE['${1:variable}']

snippet env
	\$_ENV['${1:variable}']

snippet files
	\$_FILES['${1:variable}']

snippet get
	\$_GET['${1:variable}']

snippet post
	\$_POST['${1:variable}']

snippet request
	\$_REQUEST['${1:variable}']

snippet server
	\$_SERVER['${1:variable}']

snippet session
	\$_SESSION['${1:variable}']

snippet var
	var_dump(${1:});

snippet pre
	echo "<pre style='text-align:left;'>"; var_dump(${1}); echo "</pre>";

snippet set
	$this->set('${1}', ${2});

snippet ar
options word
	'${1}' => ${2},${3}

snippet arr
options word
	array(${1})

snippet log
	$this->log(${1}, LOG_DEBUG);

snippet out
	$this->out(${1});

snippet sf_convert
	array_walk_recursive(${1}, function(&$val) { $val = mb_convert_encoding($val, '${2}', '${3}'); });

snippet sf_filelog
	/**
	 * Output var_dump to file
	 *
	 * @param    String   $str  Output string.
	 * @param    String   $kind Target log title.
	 */
	function filelog($str, $kind = "") {
		$dir  = ${0:"~/log/"};
		$date = date('Ymd');
		$file = $dir.$date.".log";
		touch($file);
		if (is_file($file)) {
			ob_start();
			if (!empty($kind)) echo "[".$kind."]\n";
			var_dump($str);
			$out=ob_get_contents();
			ob_end_clean();
			file_put_contents($file,$out,FILE_APPEND);
		}
	}

snippet sf_set
	function _set($properties = array()) {
		if (is_array($properties) && !empty($properties)) {
			foreach ($properties as $key => $val) {
				if (array_key_exists($key, $vars)) {
					$this->{$key} = $val;
				}
			}
		}
	}

snippet sf_sendRequest
	/**
	 * send POST or GET request easily.
	 *
	 * @param    String   $method   GET or POST
	 * @param    String   $url      Target url.
	 * @param    Array    $params   e.g. Array("postdata" => "hoge")
	 */
	function sendRequest($method, $url, $params) {
		$data = http_build_query($params);
		$header = Array("Content-Type: application/x-www-form-urlencoded");
		$options = array('http' => Array(
			'method' => $method,
			'header'  => implode("\r\n", $header),
		));
		if ($method == 'GET') {
			$content = file_get_contents($url . '?' . $data, false, stream_context_create($options));
		} else if ($method == 'POST') {
			$options['content'] = $data;
			$content = file_get_contents($url, false, stream_context_create($options));
		}
		return $content;
	}

snippet js
	<script type="text/javascript" charset="utf-8">
	${0}
	</script>

snippet css
	<style TYPE="text/css">
	<!--
	${0}
	-->
	</style>

snippet todo
	// TODO 

snippet input
	$this->Form->input('${0}')

snippet link
	$this->Html->link('${1}', array('controller' => '${2}', 'action' => '${0}'))

snippet img
	$this->Html->image('${1}', array('alt' => '${0}'))

snippet cond
	$conditions = [
		'conditions' => [
			${0}
		],
	];

snippet create
	$form->create('${1}', array('url' => array('controller' => '${2}', 'action' => '${0}'), 'inputDefaults' => array('label' => false, 'div' => false, 'error' => false)))

snippet new
	new ${0}();

snippet as
	$this->assertEquals(${1}, ${0});

snippet ans
	$this->assertNotEqual(${1}, ${0});

snippet ft
	${1:public }function test_${2:}() {
		$expected = $this->${3}->$2();
		$this->assertEqual($expected, ${4});
	}

snippet p
	<?php ${1} ?>

snippet test
	$expected = $this->${3}->$2();
	$this->assertEqual($expected, ${4});

snippet d
	$this->__debug($Model, ${1});

snippet peh
options word
	<?php echo h($this->data['${1}']['${0}']); ?>

snippet pr
options word
	pr(${1});${0}

snippet error
	ini_set('display_errors', 1);
	error_reporting(E_ALL);

snippet     url
options     word
    <?php echo $this->Url->build('${0}'); ?>

snippet     mc
options     word
    <?php echo $this->Utility->modifiedColor('${0}'); ?>

snippet     urla
options     word
    <?php echo $this->Url->build('/sp/${0}'); ?>

snippet     e
options     word
    exit;

snippet     mb
options     word
    mb_convert_encoding(${0}, 'UTF-8', 'SJIS-win');

snippet     en
options     word
    ->enableHydration(false)
    ->toArray()
