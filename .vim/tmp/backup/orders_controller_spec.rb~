require 'rails_helper'

RSpec.describe Api::V2::PharmacyApi::OrdersController, type: :request do
  before { allow(JsonWebToken).to receive(:jwks_hash).and_return(dummy_jwks_hash) }

  let!(:auth0_user_id) { 'auth0|507f1f77bcf86cd799439020' }
  let(:pharmacy_id) { 0 }

  describe 'GET /api/v2/pharmacy/pharmacies/:pharmacy_id/orders' do
    it_behaves_like 'pharmacy_api authentication, '

    context 'when logged in' do
      let(:pharmacy_id) { 1 }

      before { prepare_mock.authentication_setup([:pharmacy], auth0_user_id, [pharmacy_id]) }

      context 'when there is empty orders, ' do
        it 'will success' do
          is_expected.to eq 200
          expect(json.size).to eq 0
        end
      end

      context 'when there is 3 orders, ' do
        let!(:orders) { create_list :order, 3, pharmacy_id: pharmacy_id }

        it 'will success' do
          is_expected.to eq 200
          expect(json.size).to eq 3
          3.times do |i|
            expect(json[i]['id']).not_to be_nil
            expect(json[i]['pharmacy_id']).to eq pharmacy_id
            expect(json[i]['ordered_at']).not_to be_nil
            expect(json[i]['delivers_on']).not_to be_nil
            expect(json[i]['created_at']).not_to be_nil
            expect(json[i]['updated_at']).not_to be_nil
          end
        end

        context 'can limit fields' do
          let(:params) { { fields: 'id,ordered_at' } }

          it 'will success' do
            is_expected.to eq 200
            3.times do |i|
              expect(json[i]['id']).not_to be_nil
              expect(json[i]['ordered_at']).not_to be_nil
<<<<<<< HEAD
              expect(json[i].size).to eq 2
              expect(json[i]['pharmacy_id']).to be_nil
              expect(json[i]['delivers_on']).to be_nil
              expect(json[i]['created_at']).to be_nil
              expect(json[i]['updated_at']).to be_nil
=======
              expect(json[i]['delivers_on']).not_to be_nil
              expect(json[i]['created_at']).not_to be_nil
              expect(json[i]['updated_at']).not_to be_nil
            end
          end

          context 'can limit fields' do
            let(:params) { { fields: 'id,ordered_at' } }

            it 'will success' do
              is_expected.to eq 200
              3.times do |i|
                expect(json[i]['id']).not_to be_nil
                expect(json[i]['ordered_at']).not_to be_nil
                expect(json[i].size).to eq 3
                expect(json[i]['pharmacy_id']).to be_nil
                expect(json[i]['delivers_on']).to be_nil
                expect(json[i]['created_at']).to be_nil
                expect(json[i]['updated_at']).to be_nil
              end
>>>>>>> 6e10b9629f81972364693fec6edd7633956bbe4a
            end
          end
        end
      end

      context 'can sort ' do
        let(:pharmacy_id) { 1 }
        let!(:order_0401) { create :order, ordered_at: '2020-04-01', pharmacy_id: pharmacy_id }
        let!(:order_0402) { create :order, ordered_at: '2020-04-02', pharmacy_id: pharmacy_id }

        before { prepare_mock.authentication_setup([:pharmacy], auth0_user_id, [pharmacy_id]) }

        context 'by ordered_at ASC' do
          let(:params) { { sort: 'ordered_at' } }

          it 'will success' do
            is_expected.to eq 200
            expect(json.length).to eq 2
            expect(json[0]['id']).to eq order_0401.id
            expect(json[1]['id']).to eq order_0402.id
          end
        end

        context 'by ordered_at DESC' do
          let(:params) { { sort: '-ordered_at' } }

          it 'will success' do
            is_expected.to eq 200
            expect(json.length).to eq 2
            expect(json[0]['id']).to eq order_0402.id
            expect(json[1]['id']).to eq order_0401.id
          end
        end
      end
    end
  end

  describe 'POST /api/v2/pharmacy/pharmacies/:pharmacy_id/orders' do
    it_behaves_like 'pharmacy_api authentication, '

    context 'when logged in' do
      let(:pharmacy_id) { 1 }

      before { prepare_mock.authentication_setup([:pharmacy], auth0_user_id, [pharmacy_id]) }

      context 'minimum required params order with no items' do
        let(:params) { attributes_for(:order, pharmacy_id: pharmacy_id) }

        it 'will fail with 422 error' do
          is_expected.to eq 422

          expect(json['errors'].size).to eq 1
        end
      end

      context 'minimum required params order with items' do
        let(:item1) { create(:orderable_item, name: 'sample1') }
        let(:item2) { create(:orderable_item, name: 'sample2') }
        let(:items_attributes) do
          [
            attributes_for(:order_item, orderable_item_id: item1.id, dealer_id: 1),
            attributes_for(:order_item, orderable_item_id: item2.id, dealer_id: 1),
          ]
        end
        let(:params) { attributes_for(:order, pharmacy_id: pharmacy_id, items_attributes: items_attributes) }

        it 'will success' do
          is_expected.to eq 200

          expect(json['id']).not_to be_nil
          expect(json['pharmacy_id']).to eq pharmacy_id
          expect(json['ordered_at']).not_to be_nil
          expect(json['delivers_on']).not_to be_nil
          expect(json['items'].size).to eq 2
          expect(json['items'][0]['order_id']).to eq json['id']
          expect(json['items'][1]['order_id']).to eq json['id']
          expect(json['items'][0]['orderable_item_id']).to eq item1.id
          expect(json['items'][1]['orderable_item_id']).to eq item2.id
          expect(json['items'][0]['dealer_id']).to eq 1
          expect(json['items'][1]['dealer_id']).to eq 1
        end
      end

      context 'minimum required params with invalid items parameter' do
        let(:item1) { create(:orderable_item, name: 'sample1') }
        let(:item2) { create(:orderable_item, name: 'sample2') }
        let(:items_attributes) do
          [
            attributes_for(:order_item, orderable_item_id: item1.id, dealer_id: 'a'),
            attributes_for(:order_item, orderable_item_id: item2.id, dealer_id: 'a'),
          ]
        end
        let(:params) { attributes_for(:order, pharmacy_id: pharmacy_id, items_attributes: items_attributes) }

        it 'will fail with 422 error' do
          is_expected.to eq 422

          expect(json['errors'].size).to eq 1
        end
      end

      context 'delivers_on is nil' do
        let(:item1) { create(:orderable_item, name: 'sample1') }
        let(:item2) { create(:orderable_item, name: 'sample2') }
        let(:items_attributes) do
          [
            attributes_for(:order_item, orderable_item_id: item1.id, dealer_id: 1),
            attributes_for(:order_item, orderable_item_id: item2.id, dealer_id: 1),
          ]
        end
        let(:params) { attributes_for(:order, pharmacy_id: pharmacy_id, items_attributes: items_attributes, delivers_on: nil) }

        it 'will success' do
          is_expected.to eq 200

          expect(json['id']).not_to be_nil
          expect(json['delivers_on']).to be_nil
          expect(json['items'].size).to eq 2
        end
      end
    end
  end
end
