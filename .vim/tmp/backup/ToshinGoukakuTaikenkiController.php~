<?php

namespace App\Controller;

use Cake\Core\Configure;
use Cake\Http\Cookie\Cookie;
use Cake\I18n\Time;

/**
 * 合格体験記コントローラー
 */
class ToshinGoukakuTaikenkiController extends AppController
{
    // 校舎種別：ES
    const GET_KOUSHA_TYPE_ES = 'ES';

    // データ取得件数の上限値
    const GET_TAIKENKIDATAS_LIMIT = 30;

    // 医学部フラグ：True（＝医学部である）
    const GET_IGAKUBU_FLAG_TRUE = true;

    // 性別：男性
    const GET_SEX_MALE = 1;

    // 検索回数上位大学数
    const SEARCH_UNIV_LIMIT = 8;

    // 表示する大学の最低限の重み
    const MINIMUM_UNIV_DISPLAY_ORDER = 0;

    // 関連キーワード取得最大数
    const GET_KEYWORDS_MAX_NUM = 3;

    /**
     * 初期化
     *
     * @return void
     */
    public function initialize()
    {
        parent::initialize();
        $this->loadModel('App\Model\Table\ToshinGoukakuTaikenki\TaikenkidatasTable');
        $this->loadModel('App\Model\Table\ToshinGoukakuTaikenki\TaikenkiVotesTable');
        $this->loadModel('App\Model\Table\ToshinGoukakuTaikenki\EnquetePublishManagementsTable');
        $this->loadModel('App\Model\Table\ToshinGoukakuTaikenki\AreasTable');
        $this->loadModel('App\Model\Table\ToshinGoukakuTaikenki\PrefsTable');
        $this->loadModel('App\Model\Table\ToshinGoukakuTaikenki\UnivOrdersTable');
        $this->loadModel('App\Model\Table\ToshinGoukakuTaikenki\UnivSearchCountsTable');
        $this->loadModel('App\Model\Table\ToshinGoukakuTaikenki\QuestionTextsTable');
    }

    /**
     * 合格体験記一覧を取得
     *
     * @return Cake\Http\Response
     */
    public function getTaikenkidatas()
    {
        // 取得年度
        $year = $this->request->getQuery('year');

        $query = $this->Taikenkidatas->find()
            ->join([
                // 大学リスト：入学する大学
                'UnivOrders' => [
                    'table' => 'toshin_goukaku_taikenki.univ_orders',
                    'type' => 'LEFT',
                    'conditions' => 'Taikenkidatas.seito_nyugaku = UnivOrders.name',
                ],
                // 生徒画像データ
                'StudentsImages' => [
                    'table' => 'toshin_goukaku_taikenki.students_images',
                    'type' => 'LEFT',
                    'conditions' => 'StudentsImages.taikenkidata_seito_no = Taikenkidatas.seito_no',
                ],
            ]);

        $query
            ->select([
                'Taikenkidatas.id',
                'Taikenkidatas.seito_name',
                'Taikenkidatas.sex',
                'Taikenkidatas.seito_kousha_type',
                'Taikenkidatas.seito_kousha',
                'Taikenkidatas.seito_hs',
                'Taikenkidatas.seito_nyugaku',
                'Taikenkidatas.seito_nyugaku_dept',
                'Taikenkidatas.title',
                'StudentsImages.photo',
            ])
            ->where([
                'Taikenkidatas.visible_flag' => Configure::read('VALID'),
                'Taikenkidatas.year' => $year,
                'UnivOrders.display_order >' => self::MINIMUM_UNIV_DISPLAY_ORDER,
            ]);

        if (!empty($this->request->getQuery('univs'))) {
            // 検索大学
            $univs = $this->request->getQuery('univs');
            $query = $query->where(['Taikenkidatas.seito_nyugaku IN' => $univs]);
        }

        if (!empty($this->request->getQuery('keyword'))) {
            // 検索キーワード
            $keywords = $this->request->getQuery('keyword');
            $keywords = preg_split('/[\p{C}\p{Z}]++/u', $keywords);
            $keywords = array_unique($keywords);

            // 検索キーワード対象カラムをconcatする
            $concat = $query->func()->concat([
                'IFNULL(Taikenkidatas.seito_name,"")' => 'identifier',
                'IFNULL(Taikenkidatas.title,"")' => 'identifier',
                'IFNULL(Taikenkidatas.body,"")' => 'identifier',
                'IFNULL(Taikenkidatas.seito_hs,"")' => 'identifier',
                'IFNULL(Taikenkidatas.seito_nyugaku,"")' => 'identifier',
                'IFNULL(Taikenkidatas.seito_nyugaku_dept,"")' => 'identifier',
                'IFNULL(Taikenkidatas.seito_kousha,"")' => 'identifier',
            ]);

            foreach ($keywords as $keyword) {
                $query = $query->where(function ($exp) use ($concat, $keyword) {
                    return $exp->like($concat, '%' . $keyword . '%');
                });
            }
        }

        $taikenkidatas = $query
            ->order([
                'UnivOrders.display_order' => 'DESC',
            ])
            ->toArray();

        // 表示する大学名を配列に追加
        $selectUnivs = [];
        $selectUnivs = array_column($taikenkidatas, 'seito_nyugaku');
        $selectUnivs = array_unique($selectUnivs);

        $data = [];
        foreach ($taikenkidatas as $taikenkidata) {
            // 大学名をキーに持つ配列を生成
            if (in_array($taikenkidata['seito_nyugaku'], $selectUnivs, true)) {
                // いいね数追加
                $taikenkidata['countVotes'] = $this->countVotesById($taikenkidata['id']);
                $data[$taikenkidata['seito_nyugaku']][] = $taikenkidata;
            }
        }

        return $this->getJsonResponse($data);
    }

    /**
     * 合格体験記をIDより取得
     *
     * @return Cake\Http\Response
     */
    public function getTaikenkidataById()
    {
        $id = $this->request->getQuery('id');

        $taikenkidata = $this->Taikenkidatas->find()
            ->join([
                // 生徒画像データ
                'StudentsImages' => [
                    'table' => 'toshin_goukaku_taikenki.students_images',
                    'type' => 'LEFT',
                    'conditions' => 'StudentsImages.taikenkidata_seito_no = Taikenkidatas.seito_no',
                ],
            ])
            ->select([
                'Taikenkidatas.id',
                'Taikenkidatas.seito_detail_grade',
                'Taikenkidatas.seito_no',
                'Taikenkidatas.seito_name',
                'Taikenkidatas.sex',
                'Taikenkidatas.seito_kousha_type',
                'Taikenkidatas.seito_kousha',
                'Taikenkidatas.seito_hs',
                'Taikenkidatas.seito_nyugaku',
                'Taikenkidatas.seito_nyugaku_dept',
                'Taikenkidatas.enquete_01',
                'Taikenkidatas.enquete_02',
                'Taikenkidatas.enquete_03',
                'Taikenkidatas.enquete_04',
                'Taikenkidatas.enquete_05',
                'Taikenkidatas.enquete_06',
                'Taikenkidatas.enquete_07',
                'Taikenkidatas.enquete_08',
                'Taikenkidatas.enquete_09',
                'Taikenkidatas.enquete_10',
                'Taikenkidatas.enquete_11',
                'Taikenkidatas.enquete_12_1',
                'Taikenkidatas.enquete_12_2',
                'Taikenkidatas.enquete_13_1',
                'Taikenkidatas.enquete_13_2',
                'Taikenkidatas.enquete_13_3',
                'Taikenkidatas.enquete_13_4',
                'Taikenkidatas.enquete_14_1',
                'Taikenkidatas.enquete_14_2',
                'Taikenkidatas.enquete_15',
                'Taikenkidatas.enquete_16_1',
                'Taikenkidatas.enquete_16_2',
                'Taikenkidatas.enquete_17',
                'Taikenkidatas.enquete_18',
                'Taikenkidatas.enquete_19',
                'Taikenkidatas.enquete_20',
                'Taikenkidatas.enquete_21',
                'Taikenkidatas.enquete_22',
                'Taikenkidatas.enquete_23',
                'Taikenkidatas.enquete_24',
                'Taikenkidatas.enquete_25',
                'Taikenkidatas.enquete_26',
                'Taikenkidatas.enquete_33',
                'Taikenkidatas.enquete_34',
                'Taikenkidatas.enquete_35',
                'Taikenkidatas.title',
                'Taikenkidatas.body',
                'Taikenkidatas.youtube',
                'StudentsImages.photo',
            ])
            ->where([
                'Taikenkidatas.id' => $id,
                'Taikenkidatas.visible_flag' => Configure::read('VALID'),
            ])
            ->first();

        if (empty($taikenkidata)) {
            return $this->getJsonResponse('', 1, '体験記を取得できませんでした。');
        }

        $response = [];
        // いいね数追加
        $taikenkidata['voteCount'] = $this->countVotesById($taikenkidata['id']);
        $response['taikenkidatas'] = $taikenkidata;

        // 体験記の関連キーワード
        $keywords = [];
        $keywords[] = $taikenkidata['enquete_03'];
        $keywords[] = $taikenkidata['enquete_04'];
        $keywords[] = $taikenkidata['enquete_05'];
        $keywords[] = $taikenkidata['enquete_06'];
        $keywords[] = $taikenkidata['enquete_08'];
        $keywords[] = $taikenkidata['enquete_10'];
        $keywords = array_diff($keywords, ['']);
        if (!empty($keywords)) {
            // 体験記の関連キーワードを最大３つまでランダムに取得
            $keywordsCount = (count($keywords) > self::GET_KEYWORDS_MAX_NUM) ? self::GET_KEYWORDS_MAX_NUM : count($keywords);
            foreach (array_rand($keywords, $keywordsCount) as $key) {
                $randKeywords[] = $keywords[$key];
            }
            $response['keywords'] = $randKeywords;
        }

        // アンケートの公開フラグを追加
        $response['enquete_flags'] = $this->getEnqueteFlags($taikenkidata['seito_no']);

        return $this->getJsonResponse($response);
    }

    /**
     * ヘッダー内に表示する合格人数の取得
     *
     * @return Cake\Http\Response
     */
    public function countTaikenkidatasForHeader()
    {
        $year = $this->request->getQuery('year');

        $countTaikenkidatas = $this->Taikenkidatas->find()
            ->select(
                ['count' => $this->Taikenkidatas->find()->func()->count('*')]
            )
            ->where(
                [
                    'Taikenkidatas.visible_flag' => Configure::read('VALID'),
                    'Taikenkidatas.year' => $year,
                ]
            );

        return $this->getJsonResponse($countTaikenkidatas);
    }

    /**
     * セレクトボックス内で使用する地方と大学を取得
     *
     * @return Cake\Http\Response
     */
    public function getAreasWithUnivsForSelectBox()
    {
        $data = $this->Areas->find()
            ->select([
                'Areas.area',
                'UnivOrders.name',
            ])
            ->join([
                'Prefs' => [
                    'table' => 'toshin_goukaku_taikenki.prefs',
                    'type' => 'LEFT',
                    'conditions' => 'Areas.id = Prefs.area_id',
                ],
                'UnivOrders' => [
                    'table' => 'toshin_goukaku_taikenki.univ_orders',
                    'type' => 'LEFT',
                    'conditions' => 'Prefs.id = UnivOrders.pref_id',
                ],
            ])
            ->where(['UnivOrders.display_order >' => self::MINIMUM_UNIV_DISPLAY_ORDER])
            ->order([
                'Areas.id' => 'ASC',
                'UnivOrders.display_order' => 'DESC',
            ])
            ->all();

        echo "<pre style='text-align:left;'>"; var_dump($data); echo "</pre>";exit;
        $areasWithUnivs = [];
        foreach ($data as $value) {
            $areasWithUnivs[$value['area']][] = $value['UnivOrders']['name'];
        }

        return $this->getJsonResponse($areasWithUnivs);
    }

    /**
     * いいね追加API
     *
     * @return Cake\Http\Response
     */
    public function addTaikenkiVoteById()
    {
        $vote = $this->TaikenkiVotes->newEntity();
        if ($this->request->is('post')) {
            $taikenkiId = $this->request->getData(['id']);
            $taikenki = $this->Taikenkidatas->get($taikenkiId);

            // Cookie 生成
            if ($this->request->getCookie('taikenki_uniqid') === null) {
                $cookie = (new Cookie('taikenki_uniqid'))
                    ->withValue(md5(uniqid(rand(), true)))
                    ->withExpiry(new Time('+1 day'));
                $this->response = $this->response->withCookie($cookie);
            }

            // TODO HTTP_X_FORWARDED_FOR の取得をどうするか
            // $this->request->trustProxy = true;

            $data = [
                'taikenki_id' => $taikenki->id,
                'ua' => $this->request->getEnv('HTTP_USER_AGENT'),
                'remotehost' => $this->request->clientIp(false),
                // 'remotehost' => $this->request->getEnv('HTTP_X_FORWARDED_FOR'),
                'uniqid' => $this->request->getCookie('taikenki_uniqid'),
            ];

            $vote = $this->TaikenkiVotes->patchEntity($vote, $data);
            if ($this->TaikenkiVotes->save($vote)) {
                return $this->getJsonResponse('success');
            }

            return $this->getJsonResponse(null, 1, 'いいね追加を失敗しました。');
        }

        return $this->getJsonResponse(null, 2, 'POSTメソッドではありません。');
    }

    /**
     * 検索回数上位大学の取得
     *
     * @return Cake\Http\Response
     */
    public function getTopSearchUnivsByCount()
    {
        $topSearchUnivs = $this->UnivOrders->find()
            ->contain('UnivSearchCounts')
            ->select('UnivOrders.name')
            ->order(['UnivSearchCounts.count' => 'DESC'])
            ->limit(self::SEARCH_UNIV_LIMIT);

        return $this->getJsonResponse($topSearchUnivs);
    }

    /**
     * 大学検索回数の追加及び更新
     *
     * @return Cake\Http\Response
     */
    public function addOrEditUnivSearchCountsByUniv()
    {
        $univName = $this->request->getQuery(['univ_name']);
        $univ = $this->UnivOrders->findByName($univName)->first();
        // 大学の存在確認
        if ($univ === null) {
            return $this->getJsonResponse(null, 1, '大学が存在しません。');
        }

        $univSearchCount = $this->UnivSearchCounts->findByUnivId($univ['id'])->first();
        if ($univSearchCount === null) {
            // 大学検索回数新規追加
            $newCount = $this->UnivSearchCounts->newEntity();
            $data = [
                'univ_id' => $univ['id'],
                'count' => 1,
            ];
            $newCount = $this->UnivSearchCounts->patchEntity($newCount, $data);
            if ($this->UnivSearchCounts->save($newCount)) {
                return $this->getJsonResponse('success:大学検索回数を新規追加');
            }

            return $this->getJsonResponse(null, 2, '新規大学検索回数の追加を失敗しました。');
        } else {
            // 大学検索回数更新
            $oldCount = $this->UnivSearchCounts->get($univSearchCount['id']);
            $data = [
                'univ_id' => $univ['id'],
                'count' => ++$univSearchCount['count'],
            ];
            $oldCount = $this->UnivSearchCounts->patchEntity($oldCount, $data);
            if ($this->UnivSearchCounts->save($oldCount)) {
                return $this->getJsonResponse('success:大学検索回数を更新');
            }

            return $this->getJsonResponse(null, 3, '大学検索回数の更新を失敗しました。');
        }
    }

    /**
     * 質問を取得
     *
     * @return Cake\Http\Response
     */
    public function getQuestionTexts()
    {
        $questionTexts = $this->QuestionTexts->find()
            ->select([
                'QuestionTexts.id',
                'QuestionTexts.question',
            ])
            ->all();

        return $this->getJsonResponse($questionTexts);
    }

    /**
     * ES校舎案内用：合格体験記データ取得API
     *
     * @return Cake\Http\Response
     */
    public function getTaikenkidataListForEsKousha()
    {
        $request = $this->request->getQuery();

        $result = [];

        // パラメータ設定チェック
        // 生徒校舎
        $seitoKousha = '';
        if (isset($request['seito_kousha'])) {
            $seitoKousha = $request['seito_kousha'];
        }
        // 年度
        $year = '';
        if (isset($request['year'])) {
            if (is_numeric($request['year'])) {
                $year = $request['year'];
            }
        }

        // パラメータのいずれかが空の場合、処理中止
        if (empty($seitoKousha) || empty($year)) {
            return $this->getJsonResponse($result);
        }

        // SQL作成
        $query = $this->Taikenkidatas->find();

        // 性別ごとに敬称を設定する（男性：くん、男性以外：さん）
        $caseSex = $query->newExpr()
            ->addCase(
                [$query->newExpr()->eq('Taikenkidatas.sex', self::GET_SEX_MALE)],
                ['くん', 'さん'],
                ['string', 'string'],
            );

        $query->select([
            'Taikenkidatas.id',
            'Taikenkidatas.seito_name',
            'gender' => $caseSex,
            'Taikenkidatas.seito_nyugaku',
            'Taikenkidatas.seito_nyugaku_dept',
            'Taikenkidatas.seito_nyugaku_subject',
            'Taikenkidatas.seito_hs',
            'Taikenkidatas.title',
            'Taikenkidatas.body',
            'StudentsImages.photo_small',
        ])
            ->join([
                // 衛星校舎リスト
                'EsKoushaLists' => [
                    'table' => 'toshin.es_kousha_lists',
                    'type' => 'INNER',
                    'conditions' => 'Taikenkidatas.seito_kousha = EsKoushaLists.shortname',
                ],
                // 都道府県リスト；校舎が所在する都道府県
                'KoushaPref' => [
                    'table' => 'toshin_goukaku_taikenki.prefs',
                    'type' => 'LEFT',
                    'conditions' => 'EsKoushaLists.prefecture = KoushaPref.pref',
                ],
                // 大学リスト：入学する大学
                'UnivOrders' => [
                    'table' => 'toshin_goukaku_taikenki.univ_orders',
                    'type' => 'LEFT',
                    'conditions' => 'Taikenkidatas.seito_nyugaku = UnivOrders.name',
                ],
                // 都道府県リスト；入学大学が所在する都道府県
                'UnivPrefs' => [
                    'table' => 'toshin_goukaku_taikenki.prefs',
                    'type' => 'LEFT',
                    'conditions' => 'UnivOrders.pref_id = UnivPrefs.id',
                ],
                // 生徒画像データ
                'StudentsImages' => [
                    'table' => 'toshin_goukaku_taikenki.students_images',
                    'type' => 'LEFT',
                    'conditions' => 'StudentsImages.taikenkidata_seito_no = Taikenkidatas.seito_no',
                ],
            ])
            ->where([
                'Taikenkidatas.seito_kousha_type' => self::GET_KOUSHA_TYPE_ES, // ES固定
                'Taikenkidatas.seito_kousha' => $seitoKousha,
                'Taikenkidatas.year' => $year,
                'StudentsImages.photo IS NOT NULL',
                'StudentsImages.photo <>' => '',
                'StudentsImages.photo_small IS NOT NULL',
                'StudentsImages.photo_small <>' => '',
                'StudentsImages.photo_large IS NOT NULL',
                'StudentsImages.photo_large <>' => '',
            ])
            ->order([
                'UnivOrders.display_order' => 'DESC', // 大学表示順
                'ABS(UnivOrders.pref_id - KoushaPref.id)' => 'ASC', // 校舎の都道府県と大学の都道府県が近い順
                'ABS(KoushaPref.area_id - UnivPrefs.area_id)' => 'ASC', // 校舎のエリアと大学のエリアが近い順
                'FIELD(Taikenkidatas.igakubu_flag, ' . self::GET_IGAKUBU_FLAG_TRUE . ')' => 'DESC', // 医学部フラグがtrue降順
                'Taikenkidatas.seito_nyugaku_dept' => 'ASC', // 入学学部順
            ])
            ->limit(self::GET_TAIKENKIDATAS_LIMIT);

        $taikenkidatas = $query->toArray();

        $result = [
            'count' => count($taikenkidatas),
            'taikenkidatas' => $taikenkidatas,
        ];

        return $this->getJsonResponse($result);
    }

    /**
     * いいね数カウント
     *
     * @param integer $id 大学ID
     * @return integer
     */
    private function countVotesById($id)
    {
        $countVotes = $this->TaikenkiVotes->find()
            ->select(['id'])
            ->where(['taikenki_id' => $id])
            ->count();

        return $countVotes;
    }

    /**
     * アンケート公開フラグを取得
     *
     * @param integer $seitoNo 生徒番号
     * @return array
     */
    private function getEnqueteFlags($seitoNo)
    {
        $enquetePublishManagements = $this->EnquetePublishManagements->find()
            ->select([
                'EnquetePublishManagements.taikenkidata_enquete_no',
                'EnquetePublishManagements.publish_flag',
            ])
            ->where([
                'EnquetePublishManagements.taikenkidata_seito_no' => $seitoNo,
            ])
            ->toArray();

        // enquete_noをキーにした配列
        $enqueteFlags = [];
        foreach ($enquetePublishManagements as $enquetePublishManagement) {
            $enqueteFlags[$enquetePublishManagement['taikenkidata_enquete_no']] = $enquetePublishManagement['publish_flag'];
        }

        return $enqueteFlags;
    }
}
